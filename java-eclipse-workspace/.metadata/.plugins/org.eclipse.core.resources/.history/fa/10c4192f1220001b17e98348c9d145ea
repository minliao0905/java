package Snake;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;


import javax.swing.ImageIcon;
import javax.swing.JPanel;
import javax.swing.Timer;

public class MPanel extends JPanel implements KeyListener,ActionListener{
	ImageIcon title = new ImageIcon("title.jpg");
	ImageIcon body = new ImageIcon("body.png");
	ImageIcon up = new ImageIcon("up.png");
	ImageIcon down = new ImageIcon("down.png");
	ImageIcon left = new ImageIcon("left.png");
	ImageIcon right = new ImageIcon("right.png");
	ImageIcon food = new ImageIcon("food.png");
	
	int len = 3;
	int[] snakex = new int[750];
	int[] snakey = new int[750];
	String fx="R";           //方向R,L,U,D
	boolean isstart = false;
	Timer timer = new Timer(100, this);  //  设置闹钟时钟；
	 public MPanel() {
		 initSnake();   //最初蛇的计算，图形显示
		 this.setFocusable(true);  //键盘锁定
		 this.addKeyListener(this);
		 timer.start();        //时钟开始
		 
	 }
	 public void paintComponent(Graphics g) {
		 super.paintComponent(g);
//		 this.setBackground(Color.white);
		 title.paintIcon(this,g,15,11) ;     //画笔画在画布上
		 
		 g.fillRect(15, 75, 850, 600);       //画框填黑
		 
		//如果未开始 ，显示最初游戏开始界面；
		 if(isstart==false) {
			     g.setColor(Color.WHITE);
	             g.setFont(new Font("arial",Font.BOLD,40));     //设置字体颜色格式，粗体，字号
		         g.drawString("Press Space to Start",300,300);
		
	     }
	    	  for(int i=1;i<len;i++) {
			 body.paintIcon(this, g, snakex[i],snakey[i]);
		 }
		  if(fx=="R") {
			  right.paintIcon(this,g,snakex[0],snakey[0]);    //蛇 初始化
		 }else if(fx=="L") {
			  left.paintIcon(this,g,snakex[0],snakey[0]);   
		 }else  if(fx=="U") {
			  up.paintIcon(this,g,snakex[0],snakey[0]);    //蛇 初始化
		 }else if(fx=="D") {
			  down.paintIcon(this,g,snakex[0],snakey[0]);   
		 }
	    
		
}
	 
	 public void initSnake() {
		 len = 3;
		 snakex[0] = 100;
		 snakey[0] = 100;
		 snakex[1] = 75;
		 snakey[1] = 100;
		 snakex[2] = 50;
		 snakey[2] = 100;
	 }
	 /****键盘***** /****键盘*****/ /****键盘*****/ /****键盘*****/ /****键盘*****/ /****键盘*****/
	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void keyPressed(KeyEvent e) {
	   int keyCode =e.getKeyCode();
  	   if(keyCode == KeyEvent.VK_SPACE) {   //判断空格键；
		isstart = !isstart;       //改变状态；
		repaint();                 //默认方法， 重新开始，绘画；
  	   	}
  	   else if(keyCode == KeyEvent.VK_LEFT) {
  		fx="L";
  	}
  	   else if(keyCode == KeyEvent.VK_RIGHT) {
  		fx="R";
  	}
  	   else	if(keyCode == KeyEvent.VK_UP) {
  		fx="U";
  	}
  	   else if(keyCode == KeyEvent.VK_DOWN) {
  		fx="D";
  	}
	}
	@Override
	public void keyReleased(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}
	 /****键盘***** /****键盘*****/ /****键盘*****/ /****键盘*****/ /****键盘*****/ /****键盘*****/
	 /****操作移动*****//****操作移动*****//****操作移动*****//****操作移动*****//****操作移动*****//****操作移动*****/
	@Override
	public void actionPerformed(ActionEvent e) {
		if(isstart) {
			for(int i=len-1;i>0;i--) {         //最后一个节点移动
			snakex[i]=snakex[i-1];
			snakey[i]=snakey[i-1];			
		    }
			if(fx=="R") {
				snakex[0] = snakex[0]+25;
				if(snakex[0]>850) snakex[0]= 25;
			}else if(fx=="L") {
				snakex[0] = snakex[0]-25;
				if(snakex[0]<25) snakex[0]= 850;
			}else if(fx=="U") {
				snakey[0] = snakey[0]-25;
				if(snakey[0]<75) snakey[0]= 650;
			}else if(fx=="D") {
				snakey[0] = snakey[0]+25;
				if(snakey[0]>670) snakey[0]= 75;
			}
		repaint();
		}
		
		timer.start();
	}
}